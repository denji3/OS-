QUESTION 01:
Write a C program to implement FIFO Page Replacement Policy.
#include <stdio.h>
int main()
{
    int frames, t,i;
    printf("Enter the number of frames : ");
    scanf("%d", &frames);
    printf("Enter the size of incoming stream : ");
    scanf("%d", &t);
    int incomingStream[t];
    for(i = 0 ; i < t; i++)
        scanf("%d", &incomingStream[i]);
    int pageFaults = 0;
    int m, n, s, pages;

    pages = sizeof(incomingStream)/sizeof(incomingStream[0]);

    printf("Incoming \t Frame 1 \t Frame 2 \t Frame 3");
    int temp[frames];
    for(m = 0; m < frames; m++)
    {
        temp[m] = -1;
    }

    for(m = 0; m < pages; m++)
    {
        s = 0;

        for(n = 0; n < frames; n++)
        {
            if(incomingStream[m] == temp[n])
            {
                s++;
                pageFaults--;
            }
        }
        pageFaults++;

        if((pageFaults <= frames) && (s == 0))
        {
            temp[m] = incomingStream[m];
        }
        else if(s == 0)
        {
            temp[(pageFaults - 1) % frames] = incomingStream[m];
        }

        printf("\n");
        printf("%d\t\t",incomingStream[m]);
        for(n = 0; n < frames; n++)
        {
            if(temp[n] != -1)
                printf(" %d\t\t", temp[n]);
            else
                printf(" - \t\t");
        }
    }

    printf("\n\nTotal Page Faults : %d\n", pageFaults);
    return 0;
}

QUESTION 02:
Write a C program to implement FCFS.

#include <stdlib.h>
#include <stdio.h>

int main()
{
    int n, bt[20], wt[20], tat[20], i, j;
    float avwt = 0, avtat = 0;
    printf("Enter total number of processes(maximum 20):");
    scanf("%d", &n);

    printf("\nEnter Process Burst Time\n");
    for (i = 0; i < n; i++)
    {
        printf("P[%d]:", i + 1);
        scanf("%d", &bt[i]);
    }

    wt[0] = 0;

    for (i = 1; i < n; i++)
    {
        wt[i] = 0;
        for (j = 0; j < i; j++)
            wt[i] += bt[j];
    }

    printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time");

    for (i = 0; i < n; i++)
    {
        tat[i] = bt[i] + wt[i];
        avwt += wt[i];
        avtat += tat[i];
        printf("\nP[%d]\t\t%d\t\t%d\t\t%d", i + 1, bt[i], wt[i], tat[i]);
    }

    avwt /= i;
    avtat /= i;
    printf("\nAverage Waiting Time: %.3f", avwt);
    printf("\nAverage Turnaround Time: %.3f\n", avtat);
    return 0;
}

ROUND ROBIN:

